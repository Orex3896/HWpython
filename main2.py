#Урок 2. Коллекции данных. Профилирование и отладка
#Cписки и как их можно выводить
list_1 = []
list_2 = list()#Это функция с пустым списком
list_3 = [7,8,9,1,5,6]
print(*list_3)#если мы не хотим чтоб выводились квадратные скобки то перед list ставим *
#Так же можем работать с циклом for
for i in list_3:
    print(i)
#так же можем использовать функцию len для списков
print(len(list_3))#эта функция покажет сколько элементов в list в данном случае 6

#так же можем обратиться к какому-либо элементу в нашем списки
print(list_3[2])#нумерация идёт с 0 элемента
#так же можем и с обратной стороны начинать отсчёт
print(list_3[-1])

#как добавлять в пустой список какие-либо значения
list_4 = [1, 5]
print(list_4)
list_4.append(-8)#функция append позволяет добавить в конец цифру
print(*list_4)

list_1 = []
for i in range(0 , 5 , 2):# начало берётся с 0 , до какого числа  и шаг
    list_1.append(i)
    print(*list_1)

#Метод pop удаляет последний элемент из списка:
list_1 = [12, 7, -1, 21, 0]
print(list_1.pop()) # 0
print(list_1) # [12, 7, -1, 21]
print(list_1.pop()) # 21
print(list_1) # [12, 7, -1]
print(list_1.pop()) # -1
print(list_1) # [12, 7]

#2. Удаление конкретного элемента из списка.
#Надо указать значение индекса в качестве аргумента функции pop:
list_1 = [12, 7, -1, 21, 0]
print(list_1.pop(0)) # 12
print(list_1) # [7, -1, 21, 0] 

# 3. Добавление элемента на нужную позицию.
#  Функция insert — указание индекса (позиции) и значения.
list_1 = [12, 7, -1, 21, 0]
print(list_1.insert(2, 11))#добавление на 2 позицию число 11
print(list_1) # [12, 7, 11, -1, 21, 0

# Срез списка
# Помните в конце первой лекции Вы прошли срезы строк? Также существует срез списка,
# давайте научимся изменять наш список
# ● Отрицательное число в индексе — счёт с конца списка
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[0]) # 1
print(list_1[1]) # 2
print(list_1[len(list_1)-1]) # 10
print(list_1[-5]) # 6
print(list_1[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[:2]) # [1, 2] до 2 элемента
print(list_1[len(list_1)-2:]) #[9, 10] от 8 до 10ки

#КОРТЕЖ !!!!!!!!

t=()

print(type(t))
#class tuple кортеж
t = (1)
print(type(t))
#class int
t = (1, 2, 3)
print(type(t))
#class tuple кортеж

v = [1,2,3]
print(v)
print(type(v))#здесь клас лист

v = tuple(v)
print(v)
print(type(v))#здесь класс кортеж

#a,b =1 ,2

a , b , c = v

print(a,b,c)# здесь мы распаковали наш кортеж

t = (1,2,3,5)

print(t[1])#разные способоы вывода

for i in t:#разные способоы вывода
    print(i)

for i in range(len(t)):#разные способоы вывода
    print(t[i])

t = [1,2,3,4]#нельзя изменять в кортеже только в списках
t[0] =2 
print(t)


# Словари
# Словари — неупорядоченные коллекции произвольных объектов с доступом по ключу.
# В списках в качестве ключа используется индекс элемента. В словаре для определения
# элемента используется значение ключа (строка, число).

d = {}#пустой словарь
d = dict()#так же пустой словарь

d['q'] = 'qwerty'
print(d)
d['w'] = 'werty'
print(d)
print(d['w'])#так выводится значение ключа w

dictionary = {}
dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

del dictionary['left'] # удаление элемента
for item in dictionary:
    # print('{}:{}'.format(item , dictionary[item]))#здесь выводятся
    # и ключи и его значение
    print(item)#здесь выводятся только ключи

for (k,v) in dictionary.items():
    print(k,v)# k Это ключ , а v это его значение 
    #так тоже можно выводить словарь


# !!!!!!!!!!!
# Множества
# Множества содержат в себе уникальные элементы, не обязательно упорядоченные.
# Одно множество может содержать значения любых типов. Если у Вас есть два множества,
# Вы можете совершать над ними любые стандартные операции, например, объединение,
# пересечение и разность. Давайте разберем их.
colors = {'red', 'green', 'blue'}
print(colors) # {'red', 'green', 'blue'}

colors.add('red')#здесь мы пытаемся добавить red но так как он есть
#то он не добавится
print(colors) # {'red', 'green', 'blue'}

colors.add('gray')#тут мы добавляем gray и он 
#добавляется так как его нет в нашем списке
print(colors) # {'red', 'green', 'blue','gray'}

colors.remove('red')# при помощи remove мы удаляем из множества 
#какое-то значение
print(colors) # {'green', 'blue','gray'}
colors.add('red')
print(colors)
#colors.remove('red') # KeyError: 'red' эта функция удаляет какое-то
#значение из множества но может выдать ошибку если его нет

colors.discard('green') # ok эта функция ПРОВЕРЯЕТ есть ли 
#такое значение во множестве и если есть то удаляет
print(colors)#{'red', 'gray', 'blue'}

colors.clear()
print(colors)


# Множества
# Операции со множествами в Python:
a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
c = a.copy() # c = {1, 2, 3, 5, 8} копируем значения множества 'а' в 'с'
u = a.union(b) # u = {1, 2, 3, 5, 8, 13,21} объединяем два множества
i = a.intersection(b) # i = {8, 2, 5} пересечение множества `a`и `b`
dl = a.difference(b) # dl = {1, 3} отнимаем из мн-ва `a` мн-во `b`
dr = b.difference(a) # dr = {13, 21} наоборот
q = a.union(b).difference(a.intersection(b))# {1, 21, 3, 13}
# сначала находим пересечения а и в то что справа
# дальше по порядку а объединяем с в
# и потом находим разность с первым множеством

# Множества
# Неизменяемое или замороженное множество(frozenset) — множество, с которым не будут
# работать методы удаления и добавления.
a = {1, 2, 3, 5, 8}
b = frozenset(a)
print(b) # frozenset({1, 2, 3, 5, 8})

list_1 = []
for i in range(1, 101):
    list_1.append(i)
print(list_1)

list_1 = [i for i in range(2, 101,2)]
list_1 = [i for i in range(1,101) if i%2 ==0]
#кортежи чисел
list_1 = [(i, i) for i in range(1,101) if i%2 ==0]
list_1 = [(i, i*i) for i in range(1,101) if i%2 ==0] #число и его квадрат
print(list_1)